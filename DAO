import os
import pymssql

from config import config
import pandas as pd
import json
from collections import OrderedDict
from app.dto.PageDTO import PageDTO

import xlsxwriter
import pymssql
import psycopg2.extras
import json
from datetime import datetime, time

class MarsDAO:
    def __init__(self):
        print('Init MARS DAO')

    def getAodMarsConnection(self):
        return pymssql.connect(config.AOD_MARS_HOST, config.AOD_MARS_USER, config.AOD_MARS_PWD, config.AOD_MARS_DB, as_dict=True)

    def getCasStoreConnection(self):
        return psycopg2.connect(config.PG_DBCONN)

    def getBusinessList(self):
        try:
            print 'Getting Business List'
            conn = self.getAodMarsConnection()

            query = """Select Segment "key",Segment "val" from MARS_Data_Segment"""
            print 'fetching business data..'
            df1 = pd.read_sql_query(query, conn)
            print(df1)
            return json.loads(df1.to_json(orient="records"), object_pairs_hook=OrderedDict)
        except Exception, args:
            print args

    def getQuarterByCurrency(self,selectedCurrency):
        try:
            print 'Getting Quarter by selected currency'
            conn = self.getAodMarsConnection()

            query = """
                                    Select [Period Name] as periodName from MARS_Data_Quarter WHERE [Sob Short Name] ='{0}'
                                        GROUP BY [Period Year],[Period Num],[Period Name]
                                        ORDER BY [Period Year] desc,[Period Num] desc
                                    """

            query = query.format(selectedCurrency)

            print query
            print 'fetching detailed data..'
            df1 = pd.read_sql_query(query, conn)
            print(df1)
            return json.loads(df1.to_json(orient="records"), object_pairs_hook=OrderedDict)

        except Exception , args:
            print args

    def fetchMarsData(self, pageNo, pageSize, colNames, filters,currency):
        try:
            print 'Fetch page..'

            if len(colNames) == 0 or colNames is None:
                colNames = "*"

            filterBlock = ""
            if len(filters) > 0 or filters is not None:

                firstConditionFlag = True

                for filter in filters:
                    if firstConditionFlag:
                    #     firstConditionFlag = False
                    #     filterBlock = filterBlock + "WHERE " +"[Sob Short Name] ="+currency
                    # else:
                        filterBlock = filterBlock + "AND "

                    if filter['columnName'] == 'business':
                        filterBlock = filterBlock + "[Segment] in ('" + '\',\''.join(filter['values']) + "') "
                    elif filter['columnName'] == 'period':
                        filterBlock = filterBlock + "[Period Name] in ('" + '\',\''.join(filter['values']) + "') "
                    elif filter['columnName'] == 'leIDs':
                        filterBlock = filterBlock + "[Legal Entity] in ('" + '\',\''.join(filter['values']) + "') "

            # print filterBlock

            conn = self.getAodMarsConnection()

            queryDetailedData = """
                            select {0} from MARS_DATA where [Sob Short Name]='{4}' {1}
                            order by [MARS_ID]
                            offset ({2}*{3}) rows
                            fetch next {3} rows only;
                        """

            queryDetailedData = queryDetailedData.format(', '.join(colNames), filterBlock, pageNo - 1, pageSize,currency)

            print queryDetailedData

            print 'fetch detailed data..'
            df1 = pd.read_sql_query(queryDetailedData, conn)
            # Replace null strings with blanks and Nan numeric with 0
            df = df1.apply(lambda x: x.fillna(0) if x.dtype.kind in 'biufc' else x.fillna(''))

            return df

        except Exception, args:
            print 'Exception:', args.message


    def getMARSDataCount(self,filters,currency):
        try:
            print 'Getting MARS data count'

            filterBlock = ""
            if len(filters) > 0 or filters is not None:

                firstConditionFlag = True

                for filter in filters:
                    if firstConditionFlag:
                        filterBlock = filterBlock + "AND "

                    if filter['columnName'] == 'business':
                        filterBlock = filterBlock + "[Segment] in ('" + '\',\''.join(filter['values']) + "') "
                    elif filter['columnName'] == 'period':
                        filterBlock = filterBlock + "[Period Name] in ('" + '\',\''.join(filter['values']) + "') "
                    elif filter['columnName'] == 'leIDs':
                        filterBlock = filterBlock + "[Legal Entity] in ('" + '\',\''.join(filter['values']) + "') "

            queryCount = """
                            select count(*) cnt from MARS_DATA where [Sob Short Name]='{1}' {0}                           
                            """
            queryCount = queryCount.format(filterBlock,currency)

            conn = self.getAodMarsConnection()

            df = pd.read_sql_query(queryCount, conn)

            return int(df['cnt'][0])

        except Exception, args:
            print 'Exception:', args.message


    def exportMarsData(self, colNames, filters,currency):
        # output = []
        try:
            print 'In exportMarsData'

            if len(colNames) == 0 or colNames is None:
                colNames = "*"

            filterBlock = ""
            if len(filters) > 0 or filters is not None:

                firstConditionFlag = True

                for filter in filters:
                    if firstConditionFlag:
                        filterBlock = filterBlock + "AND "

                    if filter['columnName'] == 'business':
                        filterBlock = filterBlock + "[Segment] in ('" + '\',\''.join(filter['values']) + "') "
                    elif filter['columnName'] == 'period':
                        filterBlock = filterBlock + "[Period Name] in ('" + '\',\''.join(filter['values']) + "') "
                    elif filter['columnName'] == 'leIDs':
                        filterBlock = filterBlock + "[Legal Entity] in ('" + '\',\''.join(filter['values']) + "') "

            conn = self.getAodMarsConnection()

            queryDetailedData = """
                            select {0} from MARS_DATA where [Sob Short Name]='{2}' {1}
                            order by [MARS_ID];
                        """

            queryDetailedData = queryDetailedData.format(', '.join(colNames), filterBlock,currency)

            print queryDetailedData

            print 'fetching detailed data..'
            df1 = pd.read_sql_query(queryDetailedData, conn)

            # Replace null strings with blanks and Nan numeric with 0
            df = df1.apply(lambda x: x.fillna(0) if x.dtype.kind in 'biufc' else x.fillna(''))

            return df

        except Exception, args:
            print 'Exception:', args.message
            # output = [{'status':'error'},{'message':args.message}]


    def exportHighVolumeEmployees(self, colNames, filters,currency):
        # output = []
        try:
            print 'In exportHighVolumeEmployees'

            if len(colNames) == 0 or colNames is None:
                colNames = "*"

            filterBlock = ""
            if len(filters) > 0 or filters is not None:

                firstConditionFlag = True

                for filter in filters:
                    if firstConditionFlag:
                        filterBlock = filterBlock + "AND "

                    if filter['columnName'] == 'business':
                        filterBlock = filterBlock + "[Segment] in ('" + '\',\''.join(filter['values']) + "') "
                    elif filter['columnName'] == 'period':
                        filterBlock = filterBlock + "[Period Name] in ('" + '\',\''.join(filter['values']) + "') "
                    elif filter['columnName'] == 'leIDs':
                        filterBlock = filterBlock + "[Legal Entity] in ('" + '\',\''.join(filter['values']) + "') "

            conn = self.getAodMarsConnection()

            queryDetailedData = """
                            select {0} from MARS_DATA where [Sob Short Name]='{2}' {1}
                            order by [MARS_ID];
                        """

            queryDetailedData = queryDetailedData.format(', '.join(colNames), filterBlock,currency)

            # print queryDetailedData

            #
            print 'Fetching data..'
            filename = 'Mars_data_' + datetime.now().strftime("%Y%m%d_%H%M%S") + '.csv'

            for df1 in pd.read_sql_query(queryDetailedData, conn, chunksize=10000):
                df = df1.apply(lambda x: x.fillna(0) if x.dtype.kind in 'biufc' else x.fillna(''))

                if not os.path.isfile((config.export_path + '\\' + filename)):
                    df.to_csv((config.export_path + '\\' + filename), index=False, mode='a', encoding = 'utf-8')
                    print "File created: ", (config.export_path + '\\' + filename)
                    print "writing chunks.."
                else:
                    df.to_csv((config.export_path + '\\' + filename), index=False, mode='a', header=False, encoding = 'utf-8')
                    print "writing chunks.."

            return {'success': True, 'filename': filename}

        except Exception, args:
            print 'Exception while reading chunks:', args
            return {'success': False, 'message': ('Exception while reading chunks:', args.message)}

    def createExportRequest(self, sso, colNames, filters,currency):
        try:
            params = {
                "colNames": colNames
                , "filters": filters
                , "currency":currency
            }

            conn = self.getCasStoreConnection()

            cur = conn.cursor()
            query = "insert into data_export_queue(sso, params, status,appname) values ('{0}', '{1}', '{2}','{3}')"
            query = query.format(sso, json.dumps(params), 'new','MARS')
            print(query)
            cur.execute(query)
            conn.commit()
            cur.close()
            return "Request submitted"
        except Exception, args:
            print 'Exception: ', args.message
            return "Error"

    def fetchNewRequest(self):
        try:
            conn = self.getCasStoreConnection()
            query = """select * from data_export_queue where status = 'new' AND appname ='MARS' limit 1"""

            # print query

            # print 'fetching data..'
            df1 = pd.read_sql_query(query, conn)

            # Replace null strings with blanks and Nan numeric with 0
            df = df1.apply(lambda x: x.fillna(0) if x.dtype.kind in 'biufc' else x.fillna(''))

            return df

        except Exception, args:
            print 'Exception: ', args.message
            return "Error"

    def changeExportRequestStatus(self, requestID, status):
        try:
            print 'In changeExportRequestStatus..'
            conn = self.getCasStoreConnection()

            print "Status: ", status
            cur = conn.cursor()
            query = """update data_export_queue set status='{0}' where id='{1}'"""
            query = query.format(status, requestID)
            # print(query)
            cur.execute(query)
            conn.commit()
            cur.close()

            return "Success"
        except Exception, args:
            print 'Exception: ', args.message
            return "Error"
